#!/usr/bin/env python3

import os
import sys
import configparser
import requests

COMMIT_MSG_FILE = sys.argv[1]
#COMMIT_SOURCE = sys.argv[2]
#SHA1 = sys.argv[3]

current_commit_file_content = open(COMMIT_MSG_FILE, 'r').read()
# commit_message = 'test 1234'
# with open(COMMIT_MSG_FILE, 'w') as f:
    # f.write(f'{commit_message}: ')
    # f.write(current_commit_file_content)

CONFIG_DIR = os.getenv("XDG_CONFIG_HOME", os.path.expanduser("~/.config"))
API_KEYS_LOCATION = os.path.join(CONFIG_DIR, "openaiapirc")



def get_openai_chat_response(prompt, model, api_key, proxy_server=None):
    # print prompt
    # Set the URL of the OpenAI API endpoint
    url = "https://api.openai.com/v1/chat/completions"

    # Set the HTTP headers for the API request
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {api_key}"
    }

    # Set the HTTP proxy for the requests library
    proxies = {
        "http": proxy_server,
        "https": proxy_server
    } if proxy_server else None

    # Set the data for the API request
    data = {
        "model": model,
        "messages": prompt
    }

    # Send the API request with the specified proxy server
    response = requests.post(url, headers=headers, json=data, proxies=proxies)

    # Process the API response
    if response.status_code == 200:
        messages = response.json()["choices"][0]["message"]["content"]
        return messages
    else:
        print("Error:", response.text)

def create_template_ini_file():
    # """
    # If the ini file does not exist create it and add the organization_id and
    # secret_key
    # """
    """
    If the ini file does not exist create it and add the secret_key
    """
    if not os.path.isfile(API_KEYS_LOCATION):
        with open(API_KEYS_LOCATION, "w") as f:
            f.write("[openai]\n")
            # f.write("organization_id=\n")
            f.write("secret_key=\n")

        print("OpenAI API config file created at {}".format(API_KEYS_LOCATION))
        print("Please edit it and add your organization ID and secret key")
        print(
            "If you do not yet have an organization ID and secret key, you\n"
            "need to register for OpenAI Codex: \n"
            "https://openai.com/blog/openai-codex/"
        )
        sys.exit(1)


def initialize_openai_api():
    """
    Initialize the OpenAI API
    """
    # Check if file at API_KEYS_LOCATION exists
    create_template_ini_file()
    config = configparser.ConfigParser()
    config.read(API_KEYS_LOCATION)

    # openai.organization_id = config["openai"]["organization_id"].strip('"').strip("'")
    api_key = config["openai"]["secret_key"].strip('"').strip("'")
    proxy = config["openai"]["proxy"].strip('"').strip("'")
    return api_key, proxy


api_key, proxy = initialize_openai_api()

messages = [
{'role': 'system', 'content': 'You are a helpful assistant writes short git commit messages.'},
{'role': 'user', 'content': f'{current_commit_file_content}\n\nWrite the commit message.'},
]

# response = openai.ChatCompletion.create(
#     model="gpt-3.5-turbo",
#     # model="text-davinci-003",
#   messages=messages,
# )
# replace it with get_openai_chat_response
response_text = get_openai_chat_response(
    prompt=messages,
    model="gpt-3.5-turbo",
    api_key=api_key,
    proxy_server=proxy,
)


content_whole_file = response_text + current_commit_file_content

with open(COMMIT_MSG_FILE, 'w') as f:
    f.write(content_whole_file)


